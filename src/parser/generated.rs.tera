{%- import "src/parser/macros.tera" as macros -%}

#![cfg_attr(rustfmt, rustfmt_skip)]

use rowan:: {
    SyntaxNode,
    TreeArc,
    TransparentNewType,
};

use super::*;


{% for ty in sum_types %}
{%- set type_name = ty.id | camel -%}
#[derive(Debug)]
#[repr(transparent)]
pub(crate) struct {{type_name}}(SyntaxNode);

unsafe impl TransparentNewType for {{ type_name }} {
    type Repr = rowan::SyntaxNode;
}


pub(crate) enum {{ type_name }}Kind<'a> {
{% for c in ty.constructors %}
    {{c.id | camel }}(&'a {{ c.id | camel }}),
{%- endfor %}
}
{% for c in ty.constructors %}
impl<'a> From<&'a {{c.id | camel }}> for &'a {{ type_name }} {
    fn from(n: &'a {{c.id | camel }}) -> &'a {{ type_name }} {
        {{ type_name }}::cast(&n.0).unwrap()
    }
}
{% endfor %}
impl {{ type_name }} {

    #[allow(unused)]
    pub(crate) fn cast(syntax: &SyntaxNode) -> Option<&Self> {
        match syntax.kind() {
            {%- for c in ty.constructors %}
            | {{ c.id | SCREAM }}
            {%- endfor %} => Some({{ type_name }}::from_repr(syntax.into_repr())),
            _ => None,
        }
    }

    #[allow(unused)]
    pub(crate) fn kind(&self) -> {{ type_name }}Kind {
        match self.0.kind() {
            {%- for c in ty.constructors %}
            {{ c.id | SCREAM }} => {{ type_name }}Kind::{{c.id | camel }}({{ c.id | camel }}::cast(&self.0).unwrap()),
            {%- endfor %}
            _ => unreachable!(),
        }
    }

    #[allow(unused)]
    pub(crate) fn to_owned(&self) -> TreeArc<Self> {
        TreeArc::cast(self.0.to_owned())
    }
}

{% for c in ty.constructors %}
{{ macros::type(ty = c) }}
{% endfor %}
{%- endfor %}

{% for ty in prod_types %}
{{ macros::type(ty = ty) }}
{%- endfor%}
#[allow(unused)]
pub(crate) fn kind_name(kind: SyntaxKind) -> &'static str {
    match kind {
        {%- for ty in sum_types %}
        {%- for c in ty.constructors %}
        {{ c.id | SCREAM }} => "{{ c.id | camel }}",
        {%- endfor %}
        {%- endfor %}
        {%- for ty in prod_types %}
        {{ ty.id | SCREAM }} => "{{ ty.id | camel }}",
        {%- endfor %}
        _ => "Undefined"
    }
}