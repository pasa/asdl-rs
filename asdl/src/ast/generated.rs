//This file is auotgenerated by using `cargo gen-syntax`

#![cfg_attr(rustfmt, rustfmt_skip)]

#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) enum Type<'a> {
    SumType(SumType<'a>),
    ProdType(ProdType<'a>),
}
impl<'a> From<SumType<'a>> for Type<'a> {
    fn from(n: SumType) -> Type {
        Type::SumType(n)
    }
}
impl<'a> From<ProdType<'a>> for Type<'a> {
    fn from(n: ProdType) -> Type {
        Type::ProdType(n)
    }
}


#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct SumType<'a> {
    pub(crate) type_id: TypeId<'a>,
    pub(crate) constructors: Vec<Constr<'a>>,
    pub(crate) attrs: Option<Attrs<'a>>,
    pub(crate) comments: Vec<&'a str>,
}
impl<'a> SumType<'a> {

    pub(crate) fn new(type_id: TypeId<'a>, constructors: Vec<Constr<'a>>, attrs: Option<Attrs<'a>>, comments: Vec<&'a str>) -> Self {
        SumType{ type_id, constructors, attrs, comments }
    }
}

#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct ProdType<'a> {
    pub(crate) type_id: TypeId<'a>,
    pub(crate) fields: Vec<Field<'a>>,
    pub(crate) comments: Vec<&'a str>,
}
impl<'a> ProdType<'a> {

    pub(crate) fn new(type_id: TypeId<'a>, fields: Vec<Field<'a>>, comments: Vec<&'a str>) -> Self {
        ProdType{ type_id, fields, comments }
    }
}
#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) enum Field<'a> {
    Required(Required<'a>),
    Optional(Optional<'a>),
    Repeated(Repeated<'a>),
}
impl<'a> From<Required<'a>> for Field<'a> {
    fn from(n: Required) -> Field {
        Field::Required(n)
    }
}
impl<'a> From<Optional<'a>> for Field<'a> {
    fn from(n: Optional) -> Field {
        Field::Optional(n)
    }
}
impl<'a> From<Repeated<'a>> for Field<'a> {
    fn from(n: Repeated) -> Field {
        Field::Repeated(n)
    }
}


#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct Required<'a> {
    pub(crate) type_id: TypeId<'a>,
    pub(crate) id: Option<Id<'a>>,
}
impl<'a> Required<'a> {

    pub(crate) fn new(type_id: TypeId<'a>, id: Option<Id<'a>>) -> Self {
        Required{ type_id, id }
    }
}

#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct Optional<'a> {
    pub(crate) type_id: TypeId<'a>,
    pub(crate) id: Option<Id<'a>>,
}
impl<'a> Optional<'a> {

    pub(crate) fn new(type_id: TypeId<'a>, id: Option<Id<'a>>) -> Self {
        Optional{ type_id, id }
    }
}

#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct Repeated<'a> {
    pub(crate) type_id: TypeId<'a>,
    pub(crate) id: Option<Id<'a>>,
}
impl<'a> Repeated<'a> {

    pub(crate) fn new(type_id: TypeId<'a>, id: Option<Id<'a>>) -> Self {
        Repeated{ type_id, id }
    }
}


#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct Root<'a> {
    pub(crate) types: Vec<Type<'a>>,
    pub(crate) comments: Vec<&'a str>,
}
impl<'a> Root<'a> {

    pub(crate) fn new(types: Vec<Type<'a>>, comments: Vec<&'a str>) -> Self {
        Root{ types, comments }
    }
}

#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct Constr<'a> {
    pub(crate) id: ConstrId<'a>,
    pub(crate) fields: Vec<Field<'a>>,
    pub(crate) comments: Vec<&'a str>,
}
impl<'a> Constr<'a> {

    pub(crate) fn new(id: ConstrId<'a>, fields: Vec<Field<'a>>, comments: Vec<&'a str>) -> Self {
        Constr{ id, fields, comments }
    }
}

#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct Attrs<'a> {
    pub(crate) fields: Vec<Field<'a>>,
}
impl<'a> Attrs<'a> {

    pub(crate) fn new(fields: Vec<Field<'a>>) -> Self {
        Attrs{ fields }
    }
}
#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct TypeId<'a>(pub(crate) &'a str);

impl<'a> ToString for TypeId<'a> {

    #[allow(dead_code)]
    fn to_string(&self) -> String {
        self.0.to_string()
    }
}
#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct ConstrId<'a>(pub(crate) &'a str);

impl<'a> ToString for ConstrId<'a> {

    #[allow(dead_code)]
    fn to_string(&self) -> String {
        self.0.to_string()
    }
}
#[derive(PartialEq, Eq, Hash, Debug)]
pub(crate) struct Id<'a>(pub(crate) &'a str);

impl<'a> ToString for Id<'a> {

    #[allow(dead_code)]
    fn to_string(&self) -> String {
        self.0.to_string()
    }
}